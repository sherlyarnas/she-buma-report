# -*- coding: utf-8 -*-
"""BUMA_SHE_Report.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H-6MzrLILIafGnh8g17-OZxFZu5pLtIh

# **SHE BUMA REPORT** 

**Author : Sherly Ekaputri Arnas**
"""

from google.colab import drive
drive.mount('/content/drive')

! pip install july

import pandas as pd 
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from wordcloud import WordCloud

"""# Dataset Information
Dataset berisikan temuan-temuan positif dan negatif di PT BUMA tahun 2019-2020

# DATA KNOWLEDGE
"""

df = pd.read_csv('/content/drive/MyDrive/2023/SHE/buma_2019_2020.csv')
 df.head(100)

df.info()

"""berdasarkan data info di atas dapat disimpulkan bahwa :
1. banyak features yang null yaitu feature `Catatan Verifikasi`,`Catatan Pelapor`, 
 `Catatan PIC`, `Catatan Safety`
2. feature `#Task`,`Hari`, `Tanggal`, `Bulan`,`Jam`, `Menit`, `Minggu`, `Hari Dalam Minggu`, `NPK Pelapor`,`NPK PIC`, `NPK Safety Evaluator`,`Foto Laporan` tidak diperlukan. 
3. Format datetime pada `Tanggal Pembuatan` perlu diganti menjadi tipe data date sehingga lebih mudah untuk diolah

# Exploratory Data Analysis

1. Data Cleaning 
2. Handling Missing Value
"""

#drop unnecessary features
df.drop(['#Task', 'Jam', 'Menit', 'Minggu',
              'Hari Dalam Minggu' ,'NPK Pelapor','NPK PIC', 'Golden Rule',
              'NPK Safety Evaluator','Catatan Verifikasi','Catatan Pelapor', 
              'Catatan PIC', 'Catatan Safety', 'Foto Laporan'], inplace = True , axis = 1)

#handling missing value
df['Departemen Pelapor'] = df['Departemen Pelapor'].fillna('')
df['Ketidaksesuaian'] = df['Ketidaksesuaian'].fillna('')

import datetime
df['Tanggal Pembuatan']= df['Tahun'].map(str) + df['Bulan'].map(str) + df['Tanggal'].map(str)
df['Tanggal Pembuatan'] = pd.to_datetime(df['Tanggal Pembuatan'], format='%Y%m%d')
df['Due Date Penyelesaian'] = pd.to_datetime(df['Due Date Penyelesaian'], format='%d-%b-%y')
df['Tanggal Aktual Penyelesaian'] = pd.to_datetime(df['Tanggal Aktual Penyelesaian'], format='%d-%b-%y')

"""# Data Visualisasi"""

# Get value counts for 'Sumber Data'
value_counts = df['Sumber Data'].value_counts()

# Define labels and sizes for the pie chart
my_labels = value_counts.index.tolist()
sizes = value_counts.tolist()

# Define colors using a viridis colormap
colors = plt.cm.viridis(np.linspace(0, 1, len(my_labels)))

# Define explode parameter for the pie chart
my_explode = [0.05, 0.05]

# Create the pie chart
plt.figure(figsize=(12, 8))
plt.pie(sizes, labels=my_labels, autopct='%1.1f%%',pctdistance=0.85, startangle=90, colors=colors, 
        explode=my_explode, textprops={'fontsize': 20, 'color': 'black'})
# draw circle
centre_circle = plt.Circle((0, 0), 0.60, fc='white')
fig = plt.gcf()
  
# Adding Circle in Pie chart
fig.gca().add_artist(centre_circle)

plt.title('Sumber Data', fontsize=17)
plt.axis('equal')
plt.legend()
plt.show()
plt.savefig('sumber_data.png')

# berapa jumlah laporan per hari 

import july

grp = df.groupby(['Tahun', 'Bulan', 'Tanggal'])["Tanggal Pembuatan"].count().reset_index(name="count")
grp['Tanggal Pembuatan']= grp['Tahun'].map(str) +'/'+ grp['Tanggal'].map(str)  +'/'+ grp['Bulan'].map(str)
grp['Tanggal Pembuatan'] = pd.to_datetime(grp['Tanggal Pembuatan'], format='%Y/%d/%m')
july.heatmap(
    grp['Tanggal Pembuatan'],
    grp['count'], 
    cmap="Greens", 
    colorbar=True,
    fontsize=10,
    title="Report Count"
)

def autopct_format(values):
    def my_format(pct):
        total = sum(values)
        val = int(round(pct*total/100.0))
        return '{:.1f}%\n({v:d})'.format(pct, v=val)
    return my_format

# Apa saja kategori  report yang dilakukan?
plt.figure(figsize=(12,8))
value_counts =df['Kategori'].value_counts()
my_labels = value_counts.index.tolist()
sizes = value_counts.tolist()
my_colors = ['#1fa187','#6ece58', '#3e4989']
my_explode = (0, 0, 0)
plt.pie(value_counts, labels=my_labels, autopct=autopct_format(value_counts), startangle=90, shadow = False, colors=my_colors, explode=my_explode, textprops={'fontsize': 20, 'color' : 'white'})
plt.title('Kategori', fontsize=20)
plt.axis('equal')
plt.legend()
plt.show()

# berapa jumlah aduan per bulan per kategori 
from matplotlib.dates import DateFormatter

grp = df.groupby(['Tahun', 'Bulan', 'Kategori'])["Tanggal Pembuatan"].count().unstack()
grp = grp.reset_index()
grp['Period'] = grp['Tahun'].map(str) +' '+ grp['Bulan'].map(str)
grp['Period']= pd.to_datetime(grp['Period'])
grp = grp.drop(columns=['Tahun', 'Bulan'])
fig, ax = plt.subplots(figsize=(10, 7))

sns.lineplot(data=grp, x='Period', y='Temuan Positif', color = '#440154')
sns.lineplot(data=grp, x='Period', y='Kondisi Tidak Aman', color ='#4ac16d')
sns.lineplot(data=grp, x='Period', y='Tindakan Tidak Aman', color ='#fde725')

plt.legend(['Temuan Positif', 'Kondisi Tidak Aman', 'Tindakan Tidak Aman'],  bbox_to_anchor=(1.04, 1), loc="upper left") 
ax.set(xticks=grp['Period'].values)
ax.xaxis.set_major_formatter(DateFormatter("%B %y"))
plt.ylim(0, 350)
plt.xticks(rotation=45)
plt.show()

# Perusahaan mana saja  yang dilaporkan?
sns.set_style('whitegrid')
fig = plt.figure(figsize = (12,7))
grp = df['Perusahaan Safety Evaluator'].value_counts().sort_values(ascending = True)
grp.plot(kind='barh', color ='#fde725', width = 0.8)
plt.title('Proportion of Reports per Safety Evaluator Company\n', fontsize = 14)
plt.ylabel('Location')
plt.xlabel('Count of Reporters')
plt.show()

# Lokasi mana saja yang dilaporkan
sns.set_style('whitegrid')
fig = plt.figure(figsize = (12,7))
grp = df['Lokasi'].value_counts().sort_values(ascending = True)
grp.plot(kind='barh', color ='#440154', width = 0.8)
plt.title('Proportion of Reports per Location\n', fontsize = 14)
plt.ylabel('Location')
plt.xlabel('Count of Reporters')
plt.show()

string_cols = df.select_dtypes(include=['object']).columns
df[string_cols] = df[string_cols].apply(lambda x: x.str.lower() if isinstance(x.iloc[0], str) else x)

df.head()

unique_sumber_data= df['Sumber Data'].nunique()
unique_jabatan_pelapor = df['Jabatan Fungsional Pelapor'].nunique()
unique_dept_pelapor = df['Departemen Pelapor'].nunique()
unique_jab_pic = df['Jabatan Fungsional PIC'].nunique()
unique_dept_pic = df['Departemen PIC'].nunique()
unique_lokasi = df['Lokasi'].nunique()
unique_kategori = df['Kategori'].nunique()
unique_ketidaksesuaian = df['Ketidaksesuaian'].nunique()
unique_tipe_tindakan = df['Tipe Tindakan'].nunique()
unique_akar_permasalahan = df['Akar Permasalahan'].nunique()
unique_tindakan = df['Tindakan'].nunique()
unique_perusahaan = df['Perusahaan Safety Evaluator'].nunique()
unique_evaluator= df['Nama Evaluator Car'].nunique()
unique_dept_evaluator = df['Departemen Safety Evaluator'].nunique()
unique_kekerapan = df['Kekerapan'].nunique()
unique_resiko= df['Nilai Resiko'].nunique()
unique_status = df['Status'].nunique()

print('Count the unique each features')
print('-------------------------------')
print('Sumber Data : ', unique_sumber_data)
print('Jabatan Fungsional Pelapor: ', unique_jabatan_pelapor)
print('Departemen Pelapor: ', unique_dept_pelapor)
print('Jabatan Fungsional PIC: ', unique_jab_pic )
print('Departemen PIC: ', unique_dept_pic )
print('Lokasi: ', unique_lokasi )
print('Kategori: ', unique_kategori )
print('Ketidaksesuaian: ', unique_ketidaksesuaian )
print('Tipe Tindakan: ', unique_tipe_tindakan )
print('Akar Permasalahan: ', unique_akar_permasalahan )
print('Tindakan: ', unique_tindakan )
print('Perusahaan Safety Evaluator: ', unique_perusahaan )
print('Nama Evaluator Car:', unique_evaluator)
print('Departemen Safety Evaluator: ',unique_dept_evaluator )
print('Kekerapan: ', unique_kekerapan )
print('Nilai Resiko: ', unique_resiko)
print('Status: ', unique_status)

"""feature `Departemen PIC` memiliki 56 unik value namun banyak terdapat redudansi data. 
More than one name for one department 

1. `safety, health, & environment` , `safety health and environmental` , `safety, health , & environment` , `safety health and environmental`, `she`,`she departement`, `safety, health & environment`, `environment department	`
2. `operation` , `operation department`, `bc it operation department`, `port & barging operation department	`, `safety operation department`
3. `service`,`service departmen`, `emergency responses & safety services department` , `service departement`, `general services department`, `general service departemen`, `gs`,`general service` , `service`
4. `plant` , `plant departement`, 
5. `maintenace` , `asset & facility infrastructure maintenance department`, `maintenance departement`, `plant & maintenance` , `road maintenance`, `maintenace`
6. `logistic`,`logistic department` , `logistic departement`
"""

# Cleaning departmen
# define the list of values to replace
safety_replace = ['safety health and environmental', 'safety, health , & environment', 'safety health and environmental', 'she', 'she departement', 'safety, health & environment','environment department']
operation_replace =['operation department', 'bc it operation department', 'port & barging operation department', 'safety operation department']
service_replace =['service departmen', 'emergency responses & safety services department' , 'service departement', 'general services department', 'general service departemen', 'gs','general service',
                  'general service departement', 'general services departement', ' gs', ' gs ']
plant_replace = ['plant departement']
maintenace_replace =['asset & facility infrastructure maintenance department', 'maintenance departement', 'plant & maintenance' , 'road maintenance','maintenance']
logistic_replace = ['logistic department' , 'logistic departement']

# replace the values in the "Departemen PIC" 
df["Departemen PIC"] = df["Departemen PIC"].replace(safety_replace, 'safety, health, & environment')
df["Departemen PIC"] = df["Departemen PIC"].replace(operation_replace, 'operation')
df["Departemen PIC"] = df["Departemen PIC"].replace(service_replace, 'service')
df["Departemen PIC"] = df["Departemen PIC"].replace(plant_replace, 'plant')
df["Departemen PIC"] = df["Departemen PIC"].replace(maintenace_replace, 'maintenace')
df["Departemen PIC"] = df["Departemen PIC"].replace(logistic_replace, 'logistic')

# table 
dept_grp = df.groupby('Departemen PIC').size().reset_index()
dept_grp.columns = ['target', 'total']
dept_grp['%'] = round(dept_grp['total']*100/sum(dept_grp['total'],2))
dept_grp.sort_values(by='total', ascending = False).style.background_gradient(cmap='Greens')

# visualization
sns.set_style('whitegrid')
fig = plt.figure(figsize = (30,15))
grp = df['Departemen PIC'].value_counts().sort_values(ascending = True)
grp.plot(kind='barh', color ='#440154', width = 0.8)
plt.title('Proportion of Reports per Department Reporter\n', fontsize = 14)
plt.ylabel('Departement Reporter')
plt.xlabel('Count of Reporters')
plt.show()

# Berapa jumlah dan persentase  [Kategori] per unik value di tahun 2019
plt.figure(figsize=(12,8))

#Extract feature data
kategori = df[df["Tahun"] == 2019]['Kategori']

value_counts =kategori.value_counts()
my_labels = value_counts.index.tolist()
sizes = value_counts.tolist()
my_colors = ['#1fa187','#6ece58', '#fde725']
my_explode = (0, 0, 0.1)
plt.pie(value_counts, labels=my_labels, autopct=autopct_format(value_counts), startangle=90, shadow = False, colors=my_colors, explode=my_explode, textprops={'fontsize': 10})
plt.title('Kategori 2019', fontsize=20)
plt.axis('equal')
plt.legend()
plt.show()

#Berapa jumlah dan persentase  [Kategori] per unik value di tahun 2020
plt.figure(figsize=(12,8))

#Extract feature data
kategori = df[df["Tahun"] == 2020]['Kategori']

# Count the number of occurrences for each unique value
value_counts =kategori.value_counts()

# Get labels and size
my_labels = value_counts.index.tolist()
sizes = value_counts.tolist()

my_colors = ['#6ece58', '#1fa187', '#fde725']
my_explode = (0, 0, 0.1)
plt.pie(value_counts, labels=my_labels, autopct=autopct_format(value_counts), startangle=90, shadow = False, colors=my_colors, explode=my_explode, textprops={'fontsize': 10})
plt.title('Kategori 2020', fontsize=20)
plt.axis('equal')
handles, labels = plt.gca().get_legend_handles_labels()
order = [1, 0, 2]
plt.legend([handles[i] for i in order], [labels[i] for i in order])
plt.show()

grp = df[['Departemen PIC', 'Kategori'] ]
grp['Kategori'] = grp['Kategori'].replace(['kondisi tidak aman','tindakan tidak aman'], 'temuan negatif')
grp = grp.groupby(['Departemen PIC',  'Kategori'])['Kategori'].count()
grp = grp.reset_index(name="Count")
grp.sort_values("Count",  ascending=False)

grp = df[['Departemen PIC', 'Kategori']]
#grp['Kategori'] = grp['Kategori'].replace(['kondisi tidak aman','tindakan tidak aman'], 'temuan negatif')
grp = grp[grp["Kategori"] == 'temuan positif']
grp = grp.groupby(['Departemen PIC'])['Departemen PIC'].count()
grp = grp.reset_index(name="Count")
grp = grp.sort_values("Count", ascending=False) # mengubah sorting menjadi descending
plt.bar(grp["Departemen PIC"].head(3), grp["Count"].head(3), color ='#440154' ) # hanya menampilkan 3 data teratas
plt.title("Top Three Departemen PIC dengan Temuan Positif")
plt.xlabel("Jumlah Temuan Positif")
plt.ylabel("Departemen PIC")
plt.show()

grp = df[['Departemen PIC', 'Kategori']]
grp['Kategori'] = grp['Kategori'].replace(['kondisi tidak aman','tindakan tidak aman'], 'temuan negatif')
grp = grp[grp["Kategori"] == 'temuan negatif']
grp = grp.groupby(['Departemen PIC'])['Departemen PIC'].count()
grp = grp.reset_index(name="Count")
grp = grp.sort_values("Count", ascending=False) # mengubah sorting menjadi descending
plt.bar(grp["Departemen PIC"].head(3), grp["Count"].head(3), color ='#fde725') # hanya menampilkan 3 data teratas
plt.title("Top Three Departemen PIC dengan Temuan Negatif")
plt.xlabel("Departemen PIC")
plt.ylabel("Jumlah Temuan Negatif")
plt.show()

"""Temuan unik : plant , human resources & general affairs , dan operation adalah top three the best sekaligus the worst department"""

#bigest causes in 2019
comment_words = ''
stopwords = set(["di", "didalam", "dan", "yg", "nan", "tidak", "ada", "yang", "belum", "tdk", "pada", "masih", "saat", "dari", "oleh", "untuk",
                 "sudah", "dalam","melakukan", "ke", "lain", "kurang", "kurangnya", "kurang nya"])
for val in df[(df["Tahun"] == 2019)]['Akar Permasalahan']:
    val = str(val)
    tokens = val.split()
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()
    comment_words += " ".join(tokens)+" "    

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = stopwords,
                min_font_size = 10,
                prefer_horizontal=1).generate(comment_words)
 
# plot the WordCloud image                      
plt.figure(figsize = (4, 4), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
plt.title('Akar Permasalahan 2019')
plt.show()

#bigest causes in 2020
comment_words = ''
stopwords = set(["di", "didalam", "dan", "yg", "nan", "tidak", "ada", "yang", "belum", "tdk", "pada", "masih", "saat", "dari", "oleh", "untuk",
                 "sudah", "dalam","melakukan", "ke", "lain", "kurang", "kurangnya", "kurang nya"])
for val in df[(df["Tahun"] == 2020)]['Akar Permasalahan']:
    val = str(val)
    tokens = val.split()
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()
    comment_words += " ".join(tokens)+" "    

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = stopwords,
                min_font_size = 10,
                prefer_horizontal=1).generate(comment_words)
 
# plot the WordCloud image                      
plt.figure(figsize = (4, 4), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
plt.title('Akar Permasalahan 2020')
plt.show()

# berapa  nilai resiko di tahun 2019 dan tahun 2020
grp = df.groupby(['Tahun', 'Nilai Resiko'])['Tanggal Pembuatan'].count().unstack()
categories = ['Low', 'Medium', 'High']
grp.columns = pd.CategoricalIndex(grp.columns.values, 
                                 ordered=True, 
                                 categories=categories)
grp = grp.sort_index(axis=1)
ax = grp.plot(kind='bar',stacked=True, color = ['#440154', '#4ac16d', '#fde725'])
handles, labels = ax.get_legend_handles_labels()
ax.legend(reversed(handles), reversed(labels), bbox_to_anchor=(1.04, 1), loc="upper left")
plt.title('Count of Nilai Resiko in 20219 and 2020')
plt.ylabel('Jumlah Nilai Resiko')
plt.xticks(rotation=0)
plt.show()

# bagaimana tindakan terhadap pelaporan aktualisasi penyelesaian 
grp1 = pd.DataFrame({'count' : df.groupby([ "Tahun", "Bulan"]).size()}).reset_index()
grp1['Period'] = grp1['Tahun'].map(str) +' '+ grp1['Bulan'].map(str)
grp1['Period']= pd.to_datetime(grp1['Period'])
grp1 = grp1.drop(columns=['Tahun', 'Bulan'])

df_due = pd.DataFrame()
df_due['Due Date Penyelesaian'] = df['Due Date Penyelesaian']
df_due = df_due.dropna()
df_due['Bulan'] = df_due['Due Date Penyelesaian'].dt.month
df_due['Tahun'] = df_due['Due Date Penyelesaian'].dt.year
grp2 = pd.DataFrame({'count' : df_due.groupby( [ "Tahun", "Bulan"] ).size()}).reset_index()
grp2 = grp2.reset_index()
grp2['Period'] = grp2['Tahun'].map(str) +' '+ grp2['Bulan'].map(str)
grp2['Period']= pd.to_datetime(grp2['Period'])
grp2 = grp2.drop(columns=['Tahun', 'Bulan', "index"])

df_act = pd.DataFrame()
df_act['Tanggal Aktual Penyelesaian'] = df['Tanggal Aktual Penyelesaian']
df_act = df_act.dropna()
df_act['Bulan'] = df_act['Tanggal Aktual Penyelesaian'].dt.month
df_act['Tahun'] = df_act['Tanggal Aktual Penyelesaian'].dt.year
grp3 = pd.DataFrame({'count' : df_act.groupby( [ "Tahun", "Bulan"] ).size()}).reset_index()
grp3 = grp3.reset_index()
grp3['Period'] = grp3['Tahun'].map(str) +' '+ grp3['Bulan'].map(str)
grp3['Period']= pd.to_datetime(grp3['Period'])
grp3 = grp3.drop(columns=['Tahun', 'Bulan', "index"])

fig, ax = plt.subplots(figsize=(10, 7))
sns.lineplot(data=grp1, x='Period', y='count')
sns.lineplot(data=grp2, x='Period', y='count')
sns.lineplot(data=grp3, x='Period', y='count')
ax.set(xticks=grp1['Period'].values)
ax.xaxis.set_major_formatter(DateFormatter("%B %y"))
plt.xlim([datetime.date(2019, 1, 1), datetime.date(2020, 5, 1)])
plt.ylim(0, 600)
plt.xticks(rotation=45)
plt.title('Distribution of Tanggal Pembuatan, Due Date Penyelesaian dan Tanggal Aktual Penyelesaian')
plt.legend(['Tangal Pembuatan', 'Due Date Penyelesaian', 'Tanggal Aktual Penyelesaian'],  bbox_to_anchor=(1.04, 1), loc="upper left") 
plt.show()

grp = df[['Tanggal Pembuatan', 'Due Date Penyelesaian', 'Tanggal Aktual Penyelesaian']]
grp = grp.dropna()
grp['durasi penyelesaian-pembuatan'] = (grp['Due Date Penyelesaian'] - grp['Tanggal Pembuatan']).dt.days
grp['durasi aktual-penyelesaian'] = (grp['Tanggal Aktual Penyelesaian'] - grp['Due Date Penyelesaian']).dt.days
grp = grp.drop(columns=['Tanggal Pembuatan', 'Due Date Penyelesaian', 'Tanggal Aktual Penyelesaian'])
grp.describe()

import scipy.stats as st
print("95% Confidence Interval durasi penyelesaian-pembuatan")
print(st.norm.interval(alpha=0.99, loc=np.mean(grp['durasi penyelesaian-pembuatan'] ), scale=st.sem(grp['durasi penyelesaian-pembuatan'])))
print("95% Confidence Interval durasi aktual-penyelesaian")
print(st.norm.interval(alpha=0.99, loc=np.mean(grp['durasi aktual-penyelesaian'] ), scale=st.sem(grp['durasi aktual-penyelesaian'])))

sns.distplot(grp['durasi penyelesaian-pembuatan'], kde = False, color ='red', bins = 100)

"""mostly `Tanggal Pembuatan` dan `Due Date Penyelesaian` tidak memiliki silisih, ini adalah hal baik sebab ketika permasalah dilaporkan hari itu juga ditentukan kapan akan diselesaikan masalah tersebut."""

sns.distplot(grp['durasi aktual-penyelesaian'], kde = False, color ='red', bins = 100)

"""Begitu juga dengan `Due Date Penyelesaian` dan `Tanggal Aktual Penyelesaian` memiliki selisih yang sedikit. terlihat bahwa hampir semua rencana penyelesaian diselesaikan tepat pada waktunya. """

sns.jointplot(x ='durasi penyelesaian-pembuatan', y ='durasi aktual-penyelesaian', data = grp)

# wordcloud ketidaksesuaian 2019
from wordcloud import WordCloud
comment_words = ''
stopwords = set(["di", "didalam", "dan", "yg", "nan", "tidak", "ada", "yang", "belum", "tdk", "pada", "masih", "saat"])
for val in df[(df["Tahun"] == 2019)]['Ketidaksesuaian']:
    val = str(val)
    tokens = val.split()
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()
    comment_words += " ".join(tokens)+" "    

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = stopwords,
                min_font_size = 10,
                prefer_horizontal=1).generate(comment_words)
 
# plot the WordCloud image                      
plt.figure(figsize = (4, 4), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
plt.title('Ketidaksesuaian  2019')
plt.show()

# wordcloud ketidaksesuaian 2020
from wordcloud import WordCloud
comment_words = ''
stopwords = set(["di", "didalam", "dan", "yg", "nan", "tidak", "ada", "yang", "belum", "tdk", "pada", "masih", "saat"])
for val in df[(df["Tahun"] == 2020)]['Ketidaksesuaian']:
    val = str(val)
    tokens = val.split()
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()
    comment_words += " ".join(tokens)+" "    

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = stopwords,
                min_font_size = 10,
                prefer_horizontal=1).generate(comment_words)
 
# plot the WordCloud image                      
plt.figure(figsize = (4, 4), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
plt.title('Ketidaksesuaian  2020')
plt.show()

comment_words = ''
for val in df[(df["Departemen PIC"] == 'plant') & (df["Tahun"] == 2020)]['Ketidaksesuaian']:
    val = str(val)
    tokens = val.split()
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()
    comment_words += " ".join(tokens)+" "    

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = stopwords,
                min_font_size = 10,
                prefer_horizontal=1).generate(comment_words)
 
# plot the WordCloud image                      
plt.figure(figsize = (4, 4), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
plt.title('Ketidaksesuaian Plant 2020')
plt.show()

for val in df[(df["Departemen PIC"] == 'human resources & general affairs') & (df["Tahun"] == 2019)]['Ketidaksesuaian']:
    val = str(val)
    tokens = val.split()
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()
    comment_words += " ".join(tokens)+" "    

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = stopwords,
                min_font_size = 10,
                prefer_horizontal=1).generate(comment_words)
 
# plot the WordCloud image                      
plt.figure(figsize = (4, 4), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
plt.title('Ketidaksesuaian Human Resources & General Affairs 2020')
plt.show()

for val in df[(df["Departemen PIC"] == 'human resources & general affairs') & (df["Tahun"] == 2020)]['Ketidaksesuaian']:
    val = str(val)
    tokens = val.split()
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()
    comment_words += " ".join(tokens)+" "    

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = stopwords,
                min_font_size = 10,
                prefer_horizontal=1).generate(comment_words)
 
# plot the WordCloud image                      
plt.figure(figsize = (4, 4), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
plt.title('Ketidaksesuaian Human Resources & General Affairs 2020')
plt.show()

# wordcloud ketidaksesuaian 
comment_words = ''
stopwords = set(["di", "didalam", "dan", "yg", "nan", "tidak", "ada", "yang", "belum", "tdk", "pada", "masih", "saat"])
#for val in df[(df["Departemen PIC"] == 'human resources & general affairs') & (df["Tahun"] == 2020)]['Ketidaksesuaian']:
for val in df[df["Tahun"] == 2020]['Ketidaksesuaian'] :
    val = str(val)
    tokens = val.split()
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()
    comment_words += " ".join(tokens)+" "    

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = stopwords,
                min_font_size = 10,
                prefer_horizontal=1).generate(comment_words)
 
# plot the WordCloud image                      
plt.figure(figsize = (4, 4), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
plt.title('Ketidaksesuaian')
plt.show()

for val in df[(df["Tahun"] == 2020)]['Akar Permasalahan']:
    val = str(val)
    tokens = val.split()
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()
    comment_words += " ".join(tokens)+" "    

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = stopwords,
                min_font_size = 10,
                prefer_horizontal=1).generate(comment_words)
 
# plot the WordCloud image                      
plt.figure(figsize = (4, 4), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
plt.title('Akar Permasalahan 2020')
plt.show()

grp = df[['Departemen PIC', 'Kategori']]
grp['Kategori'] = grp['Kategori'].replace(['kondisi tidak aman','tindakan tidak aman'], 'temuan negatif')
#grp = grp[grp["Kategori"] == 'temuan positif']
grp = grp.groupby(['Departemen PIC'])['Departemen PIC'].count()
grp = grp.reset_index(name="Count")
grp = grp.sort_values("Count")
grp = grp[:3]
plt.barh(grp["Departemen PIC"], grp["Count"])
plt.show()

